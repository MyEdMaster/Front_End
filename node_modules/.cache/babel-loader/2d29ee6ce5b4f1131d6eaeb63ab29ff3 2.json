{"ast":null,"code":"export function FuncDraw(canvas) {\n  this.canvas = canvas;\n  var cw = canvas.width;\n  var ch = canvas.height;\n  var ctx = canvas.getContext(\"2d\");\n  var ticker = new Array(); // 每一次x的取值增加多少\n\n  var step = 0.01; // 每一毫秒画几个点\n\n  var pointsPerMillisecond = 100;\n\n  this.setConfig = function (s, p) {\n    step = s;\n    pointsPerMillisecond = p;\n  };\n\n  this.clear = function () {\n    var len = ticker.length;\n\n    if (len != 0) {\n      for (var i = 0; i < len; i++) {\n        clearInterval(ticker[i]);\n      }\n\n      ticker = new Array();\n    }\n\n    ctx.clearRect(0, 0, cw, ch);\n  };\n\n  this.setColor = function (stroke, fill) {\n    ctx.strokeStyle = stroke;\n    ctx.fillStyle = fill;\n  }; // (x, y)正常坐标系上的点，(cx, cy)为canvas里的坐标点, ctx为canvas绘图环境\n\n\n  this.drawLine = function (x1, y1, x2, y2) {\n    var cx1 = x1 + cw / 2;\n    var cx2 = x2 + cw / 2;\n    var cy1 = ch / 2 - y1;\n    var cy2 = ch / 2 - y2;\n    ctx.moveTo(cx1, cy1);\n    ctx.lineTo(cx2, cy2);\n    ctx.stroke();\n  };\n\n  this.drawPoint = function (x, y) {\n    var cx = x + cw / 2;\n    var cy = ch / 2 - y;\n    ctx.fillStyle = '#7e57c2';\n    ctx.fillRect(cx, cy, 1, 1);\n  };\n\n  this.drawPoint2 = function (x, y) {\n    var cx = x + cw / 2;\n    var cy = ch / 2 - y;\n    ctx.fillStyle = 'red';\n    ctx.fillRect(cx - 2.5, cy - 2.5, 5, 5);\n  }; // 画出x轴和y轴\n\n\n  this.drawCoords = function () {\n    this.drawLine(-cw / 2, 0, cw / 2, 0);\n    this.drawLine(0, ch / 2, 0, -ch / 2);\n  }; // 画直角坐标系的函数图像，不带动画\n\n\n  this.drawFxNow = function (f, scalex, scaley, a, b) {\n    for (var x = -cw / 2; x < cw / 2; x += step) {\n      this.drawPoint(x, f(a * x * scalex) * scaley + b);\n    }\n  }; // 画直角坐标系的函数图像，带动画\n\n\n  this.drawFx = function (f, scalex, scaley, a, b) {\n    var dp = this.drawPoint;\n    var currentx = -cw / 2;\n    var t = setInterval(function () {\n      for (var i = 0; i < pointsPerMillisecond; i++) {\n        dp(currentx, f(a * currentx * scalex) * scaley + b);\n        currentx += step;\n      }\n\n      if (currentx > cw / 2) {\n        clearInterval(t);\n      }\n    }, 1);\n    ticker.push(t);\n  };\n}","map":{"version":3,"sources":["/Users/vivian/Desktop/frondend/src/page/Function/Graph/index.js"],"names":["FuncDraw","canvas","cw","width","ch","height","ctx","getContext","ticker","Array","step","pointsPerMillisecond","setConfig","s","p","clear","len","length","i","clearInterval","clearRect","setColor","stroke","fill","strokeStyle","fillStyle","drawLine","x1","y1","x2","y2","cx1","cx2","cy1","cy2","moveTo","lineTo","drawPoint","x","y","cx","cy","fillRect","drawPoint2","drawCoords","drawFxNow","f","scalex","scaley","a","b","drawFx","dp","currentx","t","setInterval","push"],"mappings":"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","sourcesContent":["\n\nexport function FuncDraw(canvas){\n    this.canvas = canvas\n    let cw = canvas.width;\n    let ch = canvas.height\n    let ctx = canvas.getContext(\"2d\")\n    let ticker = new Array();\n\n    // 每一次x的取值增加多少\n    let step = 0.01\n    // 每一毫秒画几个点\n    let pointsPerMillisecond = 100\n    this.setConfig = function(s, p){\n        step = s\n        pointsPerMillisecond = p\n    }\n\n    this.clear = function (){\n        let len = ticker.length\n        if(len != 0){\n            for(let i = 0; i < len; i++){\n                clearInterval(ticker[i])\n            }\n            ticker = new Array()\n        }\n        ctx.clearRect(0, 0, cw, ch);\n    }\n\n    this.setColor = function (stroke, fill){\n        ctx.strokeStyle = stroke\n        ctx.fillStyle = fill\n    }\n\n    // (x, y)正常坐标系上的点，(cx, cy)为canvas里的坐标点, ctx为canvas绘图环境\n    this.drawLine = function (x1, y1, x2, y2){\n        let cx1 = x1+cw/2\n        let cx2 = x2+cw/2\n        let cy1 = ch/2-y1\n        let cy2 = ch/2-y2\n\n        ctx.moveTo(cx1, cy1)\n        ctx.lineTo(cx2, cy2)\n        ctx.stroke()\n    }\n\n    this.drawPoint = function (x, y){\n        let cx = x+cw/2\n        let cy = ch/2-y\n        ctx.fillStyle = '#7e57c2'\n        ctx.fillRect(cx, cy, 1, 1)\n    }\n    this.drawPoint2 = function (x, y){\n        let cx = x+cw/2\n        let cy = ch/2-y\n        ctx.fillStyle = 'red'\n        ctx.fillRect(cx-2.5, cy-2.5, 5, 5)\n    }\n\n    // 画出x轴和y轴\n    this.drawCoords = function (){\n        this.drawLine(-cw/2, 0, cw/2, 0);\n        this.drawLine(0, ch/2, 0, -ch/2);\n    }\n\n    // 画直角坐标系的函数图像，不带动画\n    this.drawFxNow = function (f, scalex, scaley,a,b){\n        for(let x=-cw/2; x<cw/2; x+=step){\n            this.drawPoint(x, f(a * x*scalex)* scaley + b)\n        }\n    }\n    // 画直角坐标系的函数图像，带动画\n    this.drawFx = function (f, scalex, scaley, a,b){\n        let dp = this.drawPoint\n        let currentx = -cw/2\n        let t = setInterval(function(){\n            for(let i=0; i<pointsPerMillisecond; i++){\n                dp(currentx, f(a * currentx*scalex)* scaley + b)\n                currentx += step\n            }\n            if(currentx > cw/2){\n                clearInterval(t)\n            }\n        }, 1)\n        ticker.push(t)\n    }\n}"]},"metadata":{},"sourceType":"module"}